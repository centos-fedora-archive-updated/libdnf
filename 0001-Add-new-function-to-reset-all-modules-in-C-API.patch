From 196abea6c26c5abf7a03550830a887525d678607 Mon Sep 17 00:00:00 2001
From: Jaroslav Mracek <jmracek@redhat.com>
Date: Thu, 5 Mar 2020 14:07:32 +0100
Subject: [PATCH] Add new function to reset all modules in C API

Related to: https://bugzilla.redhat.com/show_bug.cgi?id=1804564

Closes: #906
Approved by: <try>

Signed-off-by: Stephen Gallagher <sgallagh@redhat.com>
---
 libdnf/dnf-context.cpp | 65 ++++++++++++++++++++++++++++++------------
 libdnf/dnf-context.h   |  3 ++
 2 files changed, 49 insertions(+), 19 deletions(-)

diff --git a/libdnf/dnf-context.cpp b/libdnf/dnf-context.cpp
index 2a6e408e0f576514d487ebb82bb11e4db71ec91b..527da7f3e5ff875a47b396e5142e781ac6b295a0 100644
--- a/libdnf/dnf-context.cpp
+++ b/libdnf/dnf-context.cpp
@@ -39,6 +39,7 @@
 #include <memory>
 #include <set>
 #include <vector>
+#include <unordered_set>
 #include <gio/gio.h>
 #include <rpm/rpmlib.h>
 #include <rpm/rpmmacro.h>
@@ -2880,13 +2881,35 @@ pluginGetContext(DnfPluginInitData * data)
     return (static_cast<PluginHookContextInitData *>(data)->context);
 }
 
+static gboolean
+recompute_modular_filtering(DnfContext * context, DnfSack * sack, GError ** error)
+{
+    DnfContextPrivate * priv = GET_PRIVATE(context);
+    std::vector<const char *> hotfixRepos;
+    // don't filter RPMs from repos with the 'module_hotfixes' flag set
+    for (unsigned int i = 0; i < priv->repos->len; i++) {
+        auto repo = static_cast<DnfRepo *>(g_ptr_array_index(priv->repos, i));
+        if (dnf_repo_get_module_hotfixes(repo)) {
+            hotfixRepos.push_back(dnf_repo_get_id(repo));
+        }
+    }
+    hotfixRepos.push_back(nullptr);
+    try {
+        dnf_sack_filter_modules_v2(sack, nullptr, hotfixRepos.data(), priv->install_root,
+            priv->platform_module, false, false);
+    } catch (libdnf::ModulePackageContainer::NoModuleException & exception) {
+        g_set_error(error, DNF_ERROR, DNF_ERROR_FAILED, "%s", exception.what());
+        return FALSE;
+    }
+    return TRUE;
+}
+
 gboolean
 dnf_context_reset_modules(DnfContext * context, DnfSack * sack, const char ** module_names, GError ** error)
 {
     assert(sack);
     assert(module_names);
 
-    DnfContextPrivate * priv = GET_PRIVATE(context);
     auto container = dnf_sack_get_module_container(sack);
     if (!container) {
         return TRUE;
@@ -2901,25 +2924,29 @@ dnf_context_reset_modules(DnfContext * context, DnfSack * sack, const char ** mo
     }
     container->save();
     container->updateFailSafeData();
-    if (sack != nullptr) {
-        std::vector<const char *> hotfixRepos;
-        // don't filter RPMs from repos with the 'module_hotfixes' flag set
-        for (unsigned int i = 0; i < priv->repos->len; i++) {
-            auto repo = static_cast<DnfRepo *>(g_ptr_array_index(priv->repos, i));
-            if (dnf_repo_get_module_hotfixes(repo)) {
-                hotfixRepos.push_back(dnf_repo_get_id(repo));
-            }
-        }
-        hotfixRepos.push_back(nullptr);
-        try {
-            dnf_sack_filter_modules_v2(sack, nullptr, hotfixRepos.data(), priv->install_root,
-                priv->platform_module, false, false);
-        } catch (libdnf::ModuleDefaultsContainer::ConflictException & exception) {
-            g_set_error(error, DNF_ERROR, DNF_ERROR_FAILED, "%s", exception.what());
-            return FALSE;
-        }
+    return recompute_modular_filtering(context, sack, error);
+}
+
+gboolean
+dnf_context_reset_all_modules(DnfContext * context, DnfSack * sack, GError ** error)
+{
+    assert(sack);
+
+    auto container = dnf_sack_get_module_container(sack);
+    if (!container) {
+        return TRUE;
     }
-    return TRUE;
+    auto all_modules = container->getModulePackages();
+    std::unordered_set<std::string> names;
+    for (auto module: all_modules) {
+        names.emplace(module->getName());
+    }
+    for (auto & name: names) {
+        container->reset(name);
+    }
+    container->save();
+    container->updateFailSafeData();
+    return recompute_modular_filtering(context, sack, error);
 }
 
 namespace libdnf {
diff --git a/libdnf/dnf-context.h b/libdnf/dnf-context.h
index d12476d3c3bf9b51031aca2cff3de1b3d5cc39a2..f1cfddff4aa1203d41279d507b6408f878b0f8b9 100644
--- a/libdnf/dnf-context.h
+++ b/libdnf/dnf-context.h
@@ -276,6 +276,9 @@ gboolean         dnf_context_reset_modules              (DnfContext * context,
                                                          DnfSack * sack,
                                                          const char ** module_names,
                                                          GError ** error);
+gboolean         dnf_context_reset_all_modules          (DnfContext * context,
+                                                         DnfSack * sack,
+                                                         GError ** error);
 
 G_END_DECLS
 
-- 
2.24.1

