From b721e4890f5f57fc3e7744a7c12e2a74adf155eb Mon Sep 17 00:00:00 2001
From: Martin Hatina <mhatina@redhat.com>
Date: Mon, 21 Aug 2017 10:21:50 +0200
Subject: [PATCH 2/3] add tests for module forms

Closes: #318
Approved by: j-mracek
---
 libdnf/hy-subject.c         |  20 ++--
 libdnf/hy-subject.h         |  10 +-
 libdnf/hy-types.h           |   4 +-
 python/hawkey/subject-py.c  |  18 +--
 tests/hawkey/test_subject.c | 260 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 286 insertions(+), 26 deletions(-)

diff --git a/libdnf/hy-subject.c b/libdnf/hy-subject.c
index e297ea8..10fce4f 100644
--- a/libdnf/hy-subject.c
+++ b/libdnf/hy-subject.c
@@ -38,7 +38,7 @@
 const HyForm HY_FORMS_MOST_SPEC[] = {
     HY_FORM_NEVRA, HY_FORM_NA, HY_FORM_NAME, HY_FORM_NEVR, HY_FORM_NEV, _HY_FORM_STOP_ };
 
-const HyModuleFormE HY_MODULE_FORMS_MOST_SPEC[] = {
+const HyModuleFormEnum HY_MODULE_FORMS_MOST_SPEC[] = {
         HY_MODULE_FORM_NSVCAP,
         HY_MODULE_FORM_NSVCA,
         HY_MODULE_FORM_NSVAP,
@@ -163,17 +163,17 @@ forms_dup(const HyForm *forms)
     return res;
 }
 
-static HyModuleFormE *
-module_forms_dup(const HyModuleFormE *forms)
+static HyModuleFormEnum *
+module_forms_dup(const HyModuleFormEnum *forms)
 {
     if (forms == NULL)
         return NULL;
-    HyModuleFormE *res = NULL;
+    HyModuleFormEnum *res = NULL;
     const int BLOCK_SIZE = 17;
-    HyModuleFormE form;
+    HyModuleFormEnum form;
     int i = 0;
     do {
-        res = solv_extend(res, i, 1, sizeof(HyModuleFormE), BLOCK_SIZE);
+        res = solv_extend(res, i, 1, sizeof(HyModuleFormEnum), BLOCK_SIZE);
         form = forms[i];
         res[i++] = form;
     } while (form != _HY_MODULE_FORM_STOP_);
@@ -181,7 +181,7 @@ module_forms_dup(const HyModuleFormE *forms)
 }
 
 static HyPossibilities
-possibilities_create(HySubject subject, const HyForm *forms, const HyModuleFormE *module_forms, DnfSack *sack,
+possibilities_create(HySubject subject, const HyForm *forms, const HyModuleFormEnum *module_forms, DnfSack *sack,
                      int flags, enum poss_type type)
 {
     HyPossibilities poss = g_malloc0(sizeof(*poss));
@@ -240,9 +240,9 @@ hy_subject_nevra_possibilities_real(HySubject subject, HyForm *forms,
 }
 
 HyPossibilities
-hy_subject_module_form_possibilities(HySubject subject, HyModuleFormE *forms)
+hy_subject_module_form_possibilities(HySubject subject, HyModuleFormEnum *forms)
 {
-    const HyModuleFormE *default_forms = forms == NULL ? HY_MODULE_FORMS_MOST_SPEC : forms;
+    const HyModuleFormEnum *default_forms = forms == NULL ? HY_MODULE_FORMS_MOST_SPEC : forms;
     return possibilities_create(subject, NULL, default_forms, NULL, 0, TYPE_MODULE_FORM);
 }
 
@@ -272,7 +272,7 @@ hy_possibilities_next_module_form(HyPossibilities iter, HyModuleForm *out_module
 {
     if (iter->type != TYPE_MODULE_FORM || iter->current == -1)
         return -1;
-    HyModuleFormE form = iter->module_forms[iter->current];
+    HyModuleFormEnum form = iter->module_forms[iter->current];
     while (form != _HY_MODULE_FORM_STOP_) {
         iter->current++;
         *out_module_form = hy_module_form_create();
diff --git a/libdnf/hy-subject.h b/libdnf/hy-subject.h
index 1dd21ac..2daee5c 100644
--- a/libdnf/hy-subject.h
+++ b/libdnf/hy-subject.h
@@ -46,9 +46,9 @@ enum _HyForm {
 };
 
 #ifdef __cplusplus
-enum _HyModuleFormE :short {
+enum _HyModuleFormEnum :short {
 #else
-enum _HyModuleFormE {
+enum _HyModuleFormEnum {
 #endif
     HY_MODULE_FORM_NSVCAP = 1,
     HY_MODULE_FORM_NSVCA = 2,
@@ -74,13 +74,13 @@ struct _HyPossibilities {
     DnfSack *sack;
     int flags;
     HyForm *forms;
-    HyModuleFormE *module_forms;
+    HyModuleFormEnum *module_forms;
     int current;
     int type;
 };
 
 extern const HyForm HY_FORMS_MOST_SPEC[];
-extern const HyModuleFormE HY_MODULE_FORMS_MOST_SPEC[];
+extern const HyModuleFormEnum HY_MODULE_FORMS_MOST_SPEC[];
 
 HySubject hy_subject_create(const char * pattern);
 void hy_subject_free(HySubject subject);
@@ -93,7 +93,7 @@ HyPossibilities hy_subject_nevra_possibilities(HySubject subject,
 HyPossibilities hy_subject_nevra_possibilities_real(HySubject subject,
     HyForm *forms, DnfSack *sack, int flags);
 HyPossibilities hy_subject_module_form_possibilities(HySubject subject,
-                                                     HyModuleFormE *forms);
+                                                     HyModuleFormEnum *forms);
 int hy_possibilities_next_nevra(HyPossibilities iter, HyNevra *out_nevra);
 int hy_possibilities_next_module_form(HyPossibilities iter, HyModuleForm *out_module_form);
 
diff --git a/libdnf/hy-types.h b/libdnf/hy-types.h
index f98db84..edf04af 100644
--- a/libdnf/hy-types.h
+++ b/libdnf/hy-types.h
@@ -32,9 +32,9 @@ typedef enum _HyForm HyForm;
 #endif
 
 #ifdef __cplusplus
-enum _HyModuleFormE :short ;
+enum _HyModuleFormEnum :short ;
 #else
-typedef enum _HyModuleFormE HyModuleFormE;
+typedef enum _HyModuleFormEnum HyModuleFormEnum;
 #endif
 
 typedef struct _HyRepo * HyRepo;
diff --git a/python/hawkey/subject-py.c b/python/hawkey/subject-py.c
index 06b34c9..012699e 100644
--- a/python/hawkey/subject-py.c
+++ b/python/hawkey/subject-py.c
@@ -110,10 +110,10 @@ forms_from_list(PyObject *list)
     return forms;
 }
 
-static HyModuleFormE *
+static HyModuleFormEnum *
 module_forms_from_list(PyObject *list)
 {
-    HyModuleFormE *forms = NULL;
+    HyModuleFormEnum *forms = NULL;
     int i = 0;
     const int BLOCK_SIZE = 17;
     while (i < PyList_Size(list)) {
@@ -122,10 +122,10 @@ module_forms_from_list(PyObject *list)
             g_free(forms);
             return NULL;
         }
-        forms = solv_extend(forms, i, 1, sizeof(HyModuleFormE), BLOCK_SIZE);
+        forms = solv_extend(forms, i, 1, sizeof(HyModuleFormEnum), BLOCK_SIZE);
         forms[i++] = PyLong_AsLong(form);
     }
-    forms = solv_extend(forms, i, 1, sizeof(HyModuleFormE), BLOCK_SIZE);
+    forms = solv_extend(forms, i, 1, sizeof(HyModuleFormEnum), BLOCK_SIZE);
     forms[i] = _HY_MODULE_FORM_STOP_;
     return forms;
 }
@@ -139,10 +139,10 @@ forms_from_int(PyObject *num)
     return forms;
 }
 
-static HyModuleFormE *
+static HyModuleFormEnum *
 module_forms_from_int(PyObject *num)
 {
-    HyModuleFormE *forms = g_new0(HyModuleFormE, 2);
+    HyModuleFormEnum *forms = g_new0(HyModuleFormEnum, 2);
     forms[0] = PyLong_AsLong(num);
     forms[1] = _HY_MODULE_FORM_STOP_;
     return forms;
@@ -163,10 +163,10 @@ fill_form(PyObject *o)
     return cforms;
 }
 
-static HyModuleFormE *
+static HyModuleFormEnum *
 fill_module_form(PyObject *o)
 {
-    HyModuleFormE *cforms = NULL;
+    HyModuleFormEnum *cforms = NULL;
     if (PyList_Check(o))
         cforms = module_forms_from_list(o);
     else if (PyInt_Check(o))
@@ -241,7 +241,7 @@ module_form_possibilities(_SubjectObject *self, PyObject *args, PyObject *kwds)
     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O", (char**) kwlist, &form)) {
         return NULL;
     }
-    HyModuleFormE *cforms = NULL;
+    HyModuleFormEnum *cforms = NULL;
     if (form != NULL) {
         cforms = fill_module_form(form);
         if (cforms == NULL)
diff --git a/tests/hawkey/test_subject.c b/tests/hawkey/test_subject.c
index c457f84..387a9c0 100644
--- a/tests/hawkey/test_subject.c
+++ b/tests/hawkey/test_subject.c
@@ -26,6 +26,8 @@
 
 #include "libdnf/hy-nevra.h"
 #include "libdnf/hy-nevra-private.h"
+#include "libdnf/hy-module-form.h"
+#include "libdnf/hy-module-form-private.h"
 #include "libdnf/dnf-reldep.h"
 #include "libdnf/dnf-sack.h"
 #include "libdnf/hy-subject.h"
@@ -39,6 +41,27 @@ const char inp_fof_noepoch[] = "four-of-fish-3.6.9-11.fc100.x86_64";
 const char inp_fof_nev[] = "four-of-fish-8:3.6.9";
 const char inp_fof_na[] = "four-of-fish-3.6.9.i686";
 
+/* module_forms */
+/* with profile */
+const char module_nsvcap[] = "module-name:stream:1:b86c854:x86_64/profile";
+const char module_nsvap[] = "module-name:stream:1::x86_64/profile";
+const char module_nsvcp[] = "module-name:stream:1:b86c854/profile";
+const char module_nsvp[] = "module-name:stream:1/profile";
+const char module_nsap[] = "module-name:stream::x86_64/profile";
+const char module_nsp[] = "module-name:stream/profile";
+const char module_np[] = "module-name/profile";
+const char module_nap[] = "module-name::x86_64/profile";
+
+/* without profile */
+const char module_nsvca[] = "module-name:stream:1:b86c854:x86_64";
+const char module_nsva[] = "module-name:stream:1::x86_64";
+const char module_nsvc[] = "module-name:stream:1:b86c854";
+const char module_nsv[] = "module-name:stream:1";
+const char module_nsa[] = "module-name:stream::x86_64";
+const char module_ns[] = "module-name:stream";
+const char module_n[] = "module-name";
+const char module_na[] = "module-name::x86_64";
+
 START_TEST(nevra1)
 {
     HyNevra nevra = hy_nevra_create();
@@ -359,6 +382,227 @@ START_TEST(glob_arch_fail)
 }
 END_TEST
 
+START_TEST(module_form_nsvcap)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsvcap, HY_MODULE_FORM_NSVCAP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_CONTEXT), "b86c854");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsvap)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsvap, HY_MODULE_FORM_NSVAP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsvca)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsvca, HY_MODULE_FORM_NSVCA, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_CONTEXT), "b86c854");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsva)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsva, HY_MODULE_FORM_NSVA, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsvp)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsvp, HY_MODULE_FORM_NSVP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsvc)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsvc, HY_MODULE_FORM_NSVC, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_CONTEXT), "b86c854");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsv)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsv, HY_MODULE_FORM_NSV, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_int_eq(hy_module_form_get_version(module_form), 1);
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsap)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsap, HY_MODULE_FORM_NSAP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsa)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsa, HY_MODULE_FORM_NSA, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nsp)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nsp, HY_MODULE_FORM_NSP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_ns)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_ns, HY_MODULE_FORM_NS, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_STREAM), "stream");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_nap)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_nap, HY_MODULE_FORM_NAP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_na)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_na, HY_MODULE_FORM_NA, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_ARCH), "x86_64");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_np)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_np, HY_MODULE_FORM_NP, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_PROFILE), "profile");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_n)
+{
+    HyModuleForm module_form = hy_module_form_create();
+
+    ck_assert_int_eq(module_form_possibility((char *) module_n, HY_MODULE_FORM_N, module_form), 0);
+    ck_assert_str_eq(hy_module_form_get_string(module_form, HY_MODULE_FORM_NAME), "module-name");
+
+    hy_module_form_free(module_form);
+}
+END_TEST
+
+START_TEST(module_form_combined)
+{
+    HyModuleForm module_form;
+    HySubject subject = hy_subject_create(module_nsvap);
+    HyPossibilities iter = hy_subject_module_form_possibilities(subject, NULL);
+
+    ck_assert_int_eq(hy_possibilities_next_module_form(iter, &module_form), 0);
+    ck_assert_str_eq(module_form->name, "module-name");
+    ck_assert_str_eq(module_form->stream, "stream");
+    ck_assert_int_eq(module_form->version, 1);
+    fail_unless(module_form->context == NULL);
+    ck_assert_str_eq(module_form->arch, "x86_64");
+    ck_assert_str_eq(module_form->profile, "profile");
+    hy_module_form_free(module_form);
+
+    ck_assert_int_eq(hy_possibilities_next_module_form(iter, &module_form), -1);
+    hy_possibilities_free(iter);
+    hy_subject_free(subject);
+}
+END_TEST
 
 Suite *
 subject_suite(void)
@@ -373,6 +617,22 @@ subject_suite(void)
     tcase_add_test(tc, na);
     tcase_add_test(tc, combined1);
     tcase_add_test(tc, combined2);
+    tcase_add_test(tc, module_form_nsvcap);
+    tcase_add_test(tc, module_form_nsvap);
+    tcase_add_test(tc, module_form_nsvca);
+    tcase_add_test(tc, module_form_nsva);
+    tcase_add_test(tc, module_form_nsvp);
+    tcase_add_test(tc, module_form_nsvc);
+    tcase_add_test(tc, module_form_nsv);
+    tcase_add_test(tc, module_form_nsap);
+    tcase_add_test(tc, module_form_nsa);
+    tcase_add_test(tc, module_form_nsp);
+    tcase_add_test(tc, module_form_ns);
+    tcase_add_test(tc, module_form_nap);
+    tcase_add_test(tc, module_form_na);
+    tcase_add_test(tc, module_form_np);
+    tcase_add_test(tc, module_form_n);
+    tcase_add_test(tc, module_form_combined);
     suite_add_tcase(s, tc);
 
     tc = tcase_create("Full");
-- 
2.14.2

