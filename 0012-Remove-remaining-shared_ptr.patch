From 6041570114a2da72e23028d94434b3adebea1532 Mon Sep 17 00:00:00 2001
From: Jaroslav Rohel <jrohel@redhat.com>
Date: Thu, 22 Aug 2019 07:53:21 +0200
Subject: [PATCH 1/3] Do not use shared_ptr for modulemd prioritizer
 (RhBug:1636803)

---
 libdnf/module/modulemd/ModuleDefaultsContainer.cpp | 9 ++++++---
 libdnf/module/modulemd/ModuleDefaultsContainer.hpp | 4 ++--
 2 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/libdnf/module/modulemd/ModuleDefaultsContainer.cpp b/libdnf/module/modulemd/ModuleDefaultsContainer.cpp
index 72f797fe8..d7b0641e3 100644
--- a/libdnf/module/modulemd/ModuleDefaultsContainer.cpp
+++ b/libdnf/module/modulemd/ModuleDefaultsContainer.cpp
@@ -28,8 +28,11 @@
 namespace libdnf {
 
 ModuleDefaultsContainer::ModuleDefaultsContainer()
+: prioritizer(modulemd_prioritizer_new()) {}
+
+ModuleDefaultsContainer::~ModuleDefaultsContainer()
 {
-    prioritizer = std::shared_ptr<ModulemdPrioritizer>(modulemd_prioritizer_new(), g_object_unref);
+    g_object_unref(prioritizer);
 }
 
 void ModuleDefaultsContainer::fromString(const std::string &content, int priority)
@@ -86,14 +89,14 @@ void ModuleDefaultsContainer::saveDefaults(GPtrArray *data, int priority)
     }
 
     GError *error = nullptr;
-    modulemd_prioritizer_add(prioritizer.get(), data, priority, &error);
+    modulemd_prioritizer_add(prioritizer, data, priority, &error);
     checkAndThrowException<ConflictException>(error);
 }
 
 void ModuleDefaultsContainer::resolve()
 {
     GError *error = nullptr;
-    g_autoptr(GPtrArray) data = modulemd_prioritizer_resolve(prioritizer.get(), &error);
+    g_autoptr(GPtrArray) data = modulemd_prioritizer_resolve(prioritizer, &error);
     checkAndThrowException<ResolveException>(error);
 
     for (unsigned int i = 0; i < data->len; i++) {
diff --git a/libdnf/module/modulemd/ModuleDefaultsContainer.hpp b/libdnf/module/modulemd/ModuleDefaultsContainer.hpp
index bc491fe69..12703203b 100644
--- a/libdnf/module/modulemd/ModuleDefaultsContainer.hpp
+++ b/libdnf/module/modulemd/ModuleDefaultsContainer.hpp
@@ -58,7 +58,7 @@ class ModuleDefaultsContainer
     };
 
     ModuleDefaultsContainer();
-    ~ModuleDefaultsContainer() = default;
+    ~ModuleDefaultsContainer();
 
     void fromString(const std::string &content, int priority);
     std::vector<std::string> getDefaultProfiles(std::string & name, std::string & stream);
@@ -73,7 +73,7 @@ class ModuleDefaultsContainer
     template<typename T>
     void checkAndThrowException(GError *error);
 
-    std::shared_ptr<ModulemdPrioritizer> prioritizer;
+    ModulemdPrioritizer * prioritizer;
     std::map<std::string, std::unique_ptr<ModulemdDefaults>> defaults;
     void reportFailures(const GPtrArray *failures) const;
 };

From f0eab394eaef80c8d2025534ee4483540c6089cf Mon Sep 17 00:00:00 2001
From: Jaroslav Rohel <jrohel@redhat.com>
Date: Thu, 22 Aug 2019 12:26:11 +0200
Subject: [PATCH 2/3] Remove unused variable

---
 libdnf/module/ModulePackageContainer.cpp | 1 -
 1 file changed, 1 deletion(-)

diff --git a/libdnf/module/ModulePackageContainer.cpp b/libdnf/module/ModulePackageContainer.cpp
index 2b91ca177..4a7930719 100644
--- a/libdnf/module/ModulePackageContainer.cpp
+++ b/libdnf/module/ModulePackageContainer.cpp
@@ -747,7 +747,6 @@ ModulePackageContainer::getModuleState(const std::string& name)
 
 std::set<std::string> ModulePackageContainer::getInstalledPkgNames()
 {
-    std::map<std::string, std::vector<std::shared_ptr<ModulePackage>>> moduleMap;
     auto moduleNames = pImpl->persistor->getAllModuleNames();
     std::set<std::string> pkgNames;
     for (auto & moduleName: moduleNames) {

From 13be73d9519264738f16a613ab764eea77d2791c Mon Sep 17 00:00:00 2001
From: Jaroslav Rohel <jrohel@redhat.com>
Date: Thu, 22 Aug 2019 12:27:17 +0200
Subject: [PATCH 3/3] Adjust comments

---
 libdnf/module/ModulePackage.cpp          | 4 ++--
 libdnf/module/ModulePackageContainer.hpp | 4 +---
 2 files changed, 3 insertions(+), 5 deletions(-)

diff --git a/libdnf/module/ModulePackage.cpp b/libdnf/module/ModulePackage.cpp
index 0a09ec1f1..27def1b80 100644
--- a/libdnf/module/ModulePackage.cpp
+++ b/libdnf/module/ModulePackage.cpp
@@ -321,7 +321,7 @@ ModulePackage::getProfiles(const std::string &name) const
 /**
  * @brief Return list of ModuleProfiles.
  *
- * @return std::vector<std::shared_ptr<ModuleProfile>>
+ * @return std::vector<ModuleProfile>
  */
 std::vector<ModuleProfile> ModulePackage::getProfiles() const
 {
@@ -331,7 +331,7 @@ std::vector<ModuleProfile> ModulePackage::getProfiles() const
 /**
  * @brief Return list of ModuleDependencies.
  *
- * @return std::vector<std::shared_ptr<ModuleDependencies>>
+ * @return std::vector<ModuleDependencies>
  */
 std::vector<ModuleDependencies> ModulePackage::getModuleDependencies() const
 {
diff --git a/libdnf/module/ModulePackageContainer.hpp b/libdnf/module/ModulePackageContainer.hpp
index 1ce43ea6d..d89839d52 100644
--- a/libdnf/module/ModulePackageContainer.hpp
+++ b/libdnf/module/ModulePackageContainer.hpp
@@ -31,8 +31,6 @@
 #include <vector>
 #include <set>
 
-//class ModulePackageContainer;
-//typedef std::shared_ptr<ModulePackageContainer> ModulePackageContainerPtr;
 namespace libdnf {
 
 struct ModulePackageContainer
@@ -249,7 +247,7 @@ struct ModulePackageContainer
     * @brief Requiers subject in format <name>, <name>:<stream>, or <name>:<stream>:<version>
     *
     * @param subject p_subject:...
-    * @return std::vector< std::shared_ptr< ModulePackage > >
+    * @return std::vector<ModulePackage *>
     */
     std::vector<ModulePackage *> query(std::string subject);
     std::vector<ModulePackage *> query(std::string name, std::string stream,
